global:
  imagePullPolicy: Always #IfNotPresent
  # Optional: Specify image pull secrets if needed
  imagePullSecrets:
    - name: ghcr-secret
  userId: 1000 # Replace with your desired user ID
  groupId: 1000 # Replace with your desired group ID

kokuBase:
  image: "ghcr.io/ennva/koku/koku-base:0.0.1" 

kokuServer:
  enabled: true
  image: "ghcr.io/ennva/koku/koku-base:0.0.2"
  containerName: koku-server
  workingDir: /koku
  entrypoint:
    - /koku/run_server.sh
  environment:
    DATABASE_SERVICE_NAME: POSTGRES_SQL
    DATABASE_ENGINE: postgresql
    DATABASE_NAME: postgres
    POSTGRES_SQL_SERVICE_HOST: koku-postgres-service
    POSTGRES_SQL_SERVICE_PORT: 5432
    DATABASE_USER: postgres
    DATABASE_PASSWORD: postgres
    KOKU_SOURCES_CLIENT_HOST: sources-client
    KOKU_SOURCES_CLIENT_PORT: 9000
    DJANGO_READ_DOT_ENV_FILE: "True"
    DEVELOPMENT: "True"
    SCHEMA_SUFFIX: ""
    TRINO_S3A_OR_S3: s3a
    RBAC_SERVICE_HOST: rbac-server
    RBAC_SERVICE_PORT: 9000
    RBAC_SERVICE_PATH: /r/insights/platform/rbac/v1/access/
    REDIS_HOST: redis
    REDIS_PORT: 6379
    RBAC_CACHE_TTL: "30"
    PROMETHEUS_MULTIPROC_DIR: /tmp
    API_PATH_PREFIX: /api/cost-management
    MAX_GROUP_BY_OVERRIDE: "3"
    AWS_SHARED_CREDENTIALS_FILE: ""
    GOOGLE_APPLICATION_CREDENTIALS: ""
    OCI_SHARED_CREDENTIALS_FILE: "/etc/credentials/oci_config"
    OCI_CLI_KEY_FILE: "/etc/credentials/oci_key_file.pem"
    OCI_PYTHON_SDK_NO_SERVICE_IMPORTS: "True"
    DEMO_ACCOUNTS: ""
    ACCOUNT_ENHANCED_METRICS: "False"
    RUN_GUNICORN: ""
    POD_CPU_LIMIT: "1"
    GUNICORN_WORKERS: "3"
    GUNICORN_THREADS: "False"
    RETAIN_NUM_MONTHS: "4"
    NOTIFICATION_CHECK_TIME: "24"
    UNLEASH_HOST: koku-unleash-service
    UNLEASH_PREFIX: http
    UNLEASH_PORT: "4242"
    UNLEASH_TOKEN: "*:development.dbffffc83b1f92eeaf133a7eb878d4c58231acc159b5e1478ce53cfc" # Required
    UNLEASH_LOG_LEVEL: WARNING
    QE_SCHEMA: ""
    ENHANCED_ORG_ADMIN: "True"
    TAG_ENABLED_LIMIT: "200"
    DELAYED_TASK_TIME: "20"
    DELAYED_TASK_POLLING_MINUTES: "5"
  ports:
    - containerPort: 8000
      targetPort: 8000
    - containerPort: 8001
      targetPort: 9000
  volumes:
    - name: koku-code
      mountPath: /koku/koku
    - name: unleash-config
      mountPath: /koku/.unleash
    - name: db-functions
      mountPath: /koku/db_functions
    - name: scripts
      mountPath: /koku/scripts
    - name: run-server-script
      mountPath: /koku/run_server.sh
      subPath: run_server.sh
    - name: credentials-oci-key
      mountPath: /etc/credentials/oci_key_file.pem
      subPath: oci_key_file.pem
      secret:
        secretName: oci-config
    - name: credentials-oci-config
      mountPath: /etc/credentials/oci_config
      subPath: oci_config
      secret:
        secretName: oci-config

masuServer:
  enabled: true
  image: "ghcr.io/ennva/koku/koku-base:0.0.2"
  containerName: masu-server
  workingDir: /koku
  entrypoint:
    - /bin/bash
    - -c
    - /koku/run_server.sh
  environment:
    MASU: "True"
    DATABASE_SERVICE_NAME: POSTGRES_SQL
    DATABASE_ENGINE: postgresql
    DATABASE_NAME: postgres
    POSTGRES_SQL_SERVICE_HOST: koku-postgres-service
    POSTGRES_SQL_SERVICE_PORT: 5432
    DATABASE_USER: postgres
    DATABASE_PASSWORD: postgres
    S3_BUCKET_NAME_OCP_INGRESS: ocp-ingress
    S3_BUCKET_NAME: koku-bucket
    S3_ENDPOINT: http://koku-minio:9000
    S3_ACCESS_KEY: ""
    S3_SECRET: ""
    DJANGO_READ_DOT_ENV_FILE: "True"
    DEVELOPMENT: "True"
    SCHEMA_SUFFIX: ""
    TRINO_S3A_OR_S3: s3a
    RBAC_SERVICE_HOST: rbac-server
    RBAC_SERVICE_PORT: 9000
    RBAC_SERVICE_PATH: /r/insights/platform/rbac/v1/access/
    REDIS_HOST: redis
    REDIS_PORT: 6379
    RBAC_CACHE_TTL: "30"
    PROMETHEUS_MULTIPROC_DIR: /tmp
    API_PATH_PREFIX: /api/cost-management
    ACCOUNT_ENHANCED_METRICS: "False"
    SOURCES_API_SVC_HOST: sources
    SOURCES_API_SVC_PORT: "3000"
    SOURCES_API_PREFIX: /api/sources/v1.0
    SOURCES_PSK: thisMustBeEphemeralOrMinikube
    MASU_DATE_OVERRIDE: ""
    RUN_GUNICORN: ""
    POD_CPU_LIMIT: "1"
    GUNICORN_WORKERS: "3"
    GUNICORN_THREADS: "False"
    RETAIN_NUM_MONTHS: "4"
    NOTIFICATION_CHECK_TIME: "24"
    UNLEASH_HOST: koku-unleash-service
    UNLEASH_PREFIX: http
    UNLEASH_PORT: "4242"
    UNLEASH_TOKEN: "*:development.dbffffc83b1f92eeaf133a7eb878d4c58231acc159b5e1478ce53cfc" # Required
    UNLEASH_LOG_LEVEL: WARNING
    AWS_SHARED_CREDENTIALS_FILE: ""
    GOOGLE_APPLICATION_CREDENTIALS: ""
    OCI_SHARED_CREDENTIALS_FILE: "/etc/credentials/oci_config"
    OCI_CLI_KEY_FILE: "/etc/credentials/oci_key_file.pem"
    OCI_PYTHON_SDK_NO_SERVICE_IMPORTS: "True"
    ENHANCED_ORG_ADMIN: "True"
    TRINO_HOST: trino
    TRINO_PORT: "8080"
    TAG_ENABLED_LIMIT: "200"
  ports:
    - containerPort: 5042
      targetPort: 8000
    - containerPort: 5001
      targetPort: 9000
  volumes:
    - name: koku-code
      mountPath: /koku/koku
    - name: unleash-config
      mountPath: /koku/.unleash
    - name: db-functions
      mountPath: /koku/db_functions
    - name: scripts
      mountPath: /koku/scripts
    - name: run-server-script
      mountPath: /koku/run_server.sh
      subPath: run_server.sh
      configMap:
        name: koku-run-server-config
        defaultMode: 0755
    - name: credentials-oci-key
      mountPath: /etc/credentials/oci_key_file.pem
      subPath: oci_key_file.pem
      secret:
        secretName: oci-config
    - name: credentials-oci-config
      mountPath: /etc/credentials/oci_config
      subPath: oci_config
      secret:
        secretName: oci-config

kokuWorker:
  enabled: true
  image: "ghcr.io/ennva/koku/koku-base:0.0.2"
  hostname: koku-worker-1
  workingDir: /koku/koku
  entrypoint:
    - python
    - manage.py
    - restart_celery
  environment:
    DATABASE_SERVICE_NAME: POSTGRES_SQL
    DATABASE_ENGINE: postgresql
    DATABASE_NAME: postgres
    POSTGRES_SQL_SERVICE_HOST: db
    POSTGRES_SQL_SERVICE_PORT: 5432
    DATABASE_USER: postgres
    DATABASE_PASSWORD: postgres
    REDIS_HOST: redis
    REDIS_PORT: 6379
    DEBUG_ATTACH: "False"
    DEVELOPMENT: "True"
    SCHEMA_SUFFIX: ""
    TRINO_S3A_OR_S3: s3a
    KOKU_LOG_LEVEL: DEBUG
    CELERY_LOG_LEVEL: INFO
    DJANGO_LOG_LEVEL: INFO
    UNLEASH_LOG_LEVEL: WARNING
    DJANGO_SETTINGS_MODULE: koku.settings
    PROMETHEUS_MULTIPROC_DIR: /tmp
    PROMETHEUS_PUSHGATEWAY: pushgateway:9091
    ENABLE_HCS_DEBUG: "False"
    ENABLE_SUBS_DEBUG: "False"
    ENABLE_SUBS_PROVIDER_TYPES: ""
    ENABLE_ROS_DEBUG: "False"
    S3_BUCKET_NAME: koku-bucket
    S3_ENDPOINT: http://koku-minio:9000
    S3_ACCESS_KEY: ""
    S3_SECRET: ""
    DATA_DIR: /testing/data
    AWS_SHARED_CREDENTIALS_FILE: ""
    GOOGLE_APPLICATION_CREDENTIALS: ""
    OCI_SHARED_CREDENTIALS_FILE: ""
    OCI_CLI_KEY_FILE: ""
    OCI_PYTHON_SDK_NO_SERVICE_IMPORTS: "True"
    DEMO_ACCOUNTS: ""
    INITIAL_INGEST_OVERRIDE: "False"
    INITIAL_INGEST_NUM_MONTHS: "2"
    POLLING_TIMER: "60"
    POLLING_COUNT: "21"
    XL_REPORT_COUNT: "100"
    PROCESSING_WAIT_TIMER: "3"
    LARGE_PROCESSING_WAIT_TIMER: "7"
    DELAYED_TASK_TIME: "20"
    DELAYED_TASK_POLLING_MINUTES: "5"
    TAG_ENABLED_LIMIT: "200"
    AUTO_DATA_INGEST: "True"
    REPORT_PROCESSING_BATCH_SIZE: "100000"
    TRINO_HOST: trino
    TRINO_PORT: "8080"
    SOURCES_API_HOST: sources-server
    SOURCES_API_PORT: "3000"
    DATE_OVERRIDE: ""
    TRINO_DATE_STEP: "31"
    VALIDATION_RANGE: "5"
    MAX_CELERY_TASKS_PER_WORKER: "10"
    RETAIN_NUM_MONTHS: "4"
    NOTIFICATION_CHECK_TIME: "24"
    UNLEASH_HOST: unleash
    UNLEASH_PREFIX: http
    UNLEASH_PORT: "4242"
    UNLEASH_TOKEN: "" # Required
    ENHANCED_ORG_ADMIN: "True"
  ports:
    - containerPort: 6001
      targetPort: 9000
      name: debug-port-1
    - containerPort: 6002
      targetPort: 9000
      name: debug-port-2
    - containerPort: 6003
      targetPort: 9000
      name: debug-port-3
    - containerPort: 6004
      targetPort: 9000
      name: debug-port-4
    - containerPort: 6005
      targetPort: 9000
      name: debug-port-5
    - containerPort: 6006
      targetPort: 9000
      name: debug-port-6
    - containerPort: 6007
      targetPort: 9000
      name: debug-port-7
    - containerPort: 6008
      targetPort: 9000
      name: debug-port-8
    - containerPort: 6009
      targetPort: 9000
      name: debug-port-9
    - containerPort: 6010
      targetPort: 9000
      name: debug-port-10
    - containerPort: 6011
      targetPort: 9000
      name: debug-port-11
    - containerPort: 6012
      targetPort: 9000
      name: debug-port-12
    - containerPort: 6013
      targetPort: 9000
      name: debug-port-13
    - containerPort: 6014
      targetPort: 9000
      name: debug-port-14
    - containerPort: 6015
      targetPort: 9000
      name: debug-port-15
    - containerPort: 6016
      targetPort: 9000
      name: debug-port-16
    - containerPort: 6017
      targetPort: 9000
      name: debug-port-17
    - containerPort: 6018
      targetPort: 9000
      name: debug-port-18
    - containerPort: 6019
      targetPort: 9000
      name: debug-port-19
    - containerPort: 6020
      targetPort: 9000
      name: debug-port-20
    - containerPort: 5678
      targetPort: 5678
  volumes:
    - name: koku-code
      mountPath: /koku/koku
    - name: unleash-config
      mountPath: /koku/.unleash
    - name: db-functions
      mountPath: /koku/db_functions
    - name: scripts
      mountPath: /koku/scripts
    - name: testing
      mountPath: /testing
    - name: azure-local
      mountPath: /tmp/local_container
    - name: oci-local
      mountPath: /tmp/oci_local
    - name: aws-local-0
      mountPath: /tmp/local_bucket
    - name: aws-local-1
      mountPath: /tmp/local_bucket_0
    - name: aws-local-2
      mountPath: /tmp/local_bucket_1
    - name: aws-local-3
      mountPath: /tmp/local_bucket_2
    - name: aws-local-4
      mountPath: /tmp/local_bucket_3
    - name: aws-local-5
      mountPath: /tmp/local_bucket_4
    - name: aws-local-6
      mountPath: /tmp/local_bucket_5
    - name: insights-local
      mountPath: /var/tmp/masu/insights_local
    - name: gcp-local-0
      mountPath: /tmp/gcp_local_bucket
    - name: gcp-local-1
      mountPath: /tmp/gcp_local_bucket_0
    - name: gcp-local-2
      mountPath: /tmp/gcp_local_bucket_1
    - name: gcp-local-3
      mountPath: /tmp/gcp_local_bucket_2
    - name: gcp-local-4
      mountPath: /tmp/gcp_local_bucket_3
    - name: credentials
      mountPath: /etc/credentials

kokuListener:
  enabled: true
  image: "ghcr.io/ennva/koku/koku-base:0.0.2"
  containerName: koku-listener
  workingDir: /koku/
  entrypoint:
    - watchmedo
    - auto-restart
    - "--directory=./koku"
    - "--pattern=*.py"
    - "--ignore-patterns=*test*"
    - "--recursive"
    - "--"
    - python
    - koku/manage.py
    - listener
  environment:
    DJANGO_READ_DOT_ENV_FILE: "True"
    DATABASE_SERVICE_NAME: POSTGRES_SQL
    POSTGRES_SQL_SERVICE_HOST: db
    POSTGRES_SQL_SERVICE_PORT: 5432
    DATABASE_ENGINE: postgresql
    DATABASE_NAME: postgres
    DATABASE_HOST: db
    DATABASE_PORT: 5432
    DATABASE_USER: postgres
    DATABASE_PASSWORD: postgres
    REDIS_HOST: redis
    REDIS_PORT: "6379"
    INSIGHTS_KAFKA_HOST: kafka
    INSIGHTS_KAFKA_PORT: "29092"
    KAFKA_CONNECT: "True"
    PROMETHEUS_MULTIPROC_DIR: /tmp
    MASU_DATE_OVERRIDE: ""
    KOKU_LOG_LEVEL: INFO
    DJANGO_LOG_LEVEL: INFO
    UNLEASH_LOG_LEVEL: WARNING
    INITIAL_INGEST_NUM_MONTHS: "1"
    PYTHONPATH: /koku/koku
    S3_BUCKET_NAME: koku-bucket
    S3_ENDPOINT: http://koku-minio:9000
    S3_ACCESS_KEY: ""
    S3_SECRET: ""
    TRINO_HOST: trino
    TRINO_PORT: "8080"
    UNLEASH_HOST: unleash
    UNLEASH_PREFIX: http
    UNLEASH_PORT: "4242"
    UNLEASH_TOKEN: "" # Required
    ENHANCED_ORG_ADMIN: "True"
  ports:
    - containerPort: 7001
      targetPort: 9000
      name: listener-port-1
    - containerPort: 7002
      targetPort: 9000
      name: listener-port-2
    - containerPort: 7003
      targetPort: 9000
      name: listener-port-3
    - containerPort: 7004
      targetPort: 9000
      name: listener-port-4
    - containerPort: 7005
      targetPort: 9000
      name: listener-port-5
    - containerPort: 7006
      targetPort: 9000
      name: listener-port-6
    - containerPort: 7007
      targetPort: 9000
      name: listener-port-7
    - containerPort: 7008
      targetPort: 9000
      name: listener-port-8
    - containerPort: 7009
      targetPort: 9000
      name: listener-port-9
    - containerPort: 7010
      targetPort: 9000
      name: listener-port-10
    - containerPort: 7011
      targetPort: 9000
      name: listener-port-11
    - containerPort: 7012
      targetPort: 9000
      name: listener-port-12
    - containerPort: 7013
      targetPort: 9000
      name: listener-port-13
    - containerPort: 7014
      targetPort: 9000
      name: listener-port-14
    - containerPort: 7015
      targetPort: 9000
      name: listener-port-15
    - containerPort: 7016
      targetPort: 9000
      name: listener-port-16
    - containerPort: 7017
      targetPort: 9000
      name: listener-port-17
    - containerPort: 7018
      targetPort: 9000
      name: listener-port-18
    - containerPort: 7019
      targetPort: 9000
      name: listener-port-19
    - containerPort: 7020
      targetPort: 9000
      name: listener-port-20
  volumes:
    - name: koku-code
      mountPath: /koku/koku
    - name: unleash-config
      mountPath: /koku/.unleash
    - name: db-functions
      mountPath: /koku/db_functions
    - name: scripts
      mountPath: /koku/scripts

subsWorker:
  enabled: true
  image: "ghcr.io/ennva/koku/koku-base:0.0.2"
  containerName: subs-worker
  workingDir: /koku/koku
  entrypoint:
    - watchmedo
    - auto-restart
    - "--directory=./"
    - "--pattern=*.py"
    - "--ignore-patterns=*test*"
    - "--recursive"
    - "--"
    - celery
    - "-A"
    - "koku"
    - "worker"
    - "--without-gossip"
    - "-l"
    - "info"
    - "-Q"
    - "subs_extraction,subs_transmission"
  environment:
    DJANGO_READ_DOT_ENV_FILE: "True"
    DATABASE_SERVICE_NAME: POSTGRES_SQL
    DATABASE_ENGINE: postgresql
    DATABASE_NAME: postgres
    POSTGRES_SQL_SERVICE_HOST: db
    POSTGRES_SQL_SERVICE_PORT: 5432
    DATABASE_USER: postgres
    DATABASE_PASSWORD: postgres
    KOKU_API_HOST: koku-server
    KOKU_API_PORT: "8000"
    KOKU_API_PATH_PREFIX: /api/cost-management/v1
    ENABLE_SUBS_DEBUG: "False"
    ENABLE_SUBS_PROVIDER_TYPES: ""
    S3_BUCKET_NAME: koku-bucket
    S3_ENDPOINT: http://koku-minio:9000
    S3_ACCESS_KEY: ""
    S3_SECRET: ""
    AWS_SHARED_CREDENTIALS_FILE: ""
    REDIS_HOST: redis
    REDIS_PORT: "6379"
    INSIGHTS_KAFKA_HOST: kafka
    INSIGHTS_KAFKA_PORT: "29092"
    PROMETHEUS_MULTIPROC_DIR: /tmp
    KOKU_LOG_LEVEL: DEBUG
    DJANGO_LOG_LEVEL: INFO
    UNLEASH_LOG_LEVEL: WARNING
    AUTO_DATA_INGEST: "True"
    RUN_GUNICORN: ""
    POD_CPU_LIMIT: "1"
    GUNICORN_WORKERS: "3"
    GUNICORN_THREADS: "False"
    UNLEASH_HOST: unleash
    UNLEASH_PREFIX: http
    UNLEASH_PORT: "4242"
    UNLEASH_TOKEN: "" # Required
    ENHANCED_ORG_ADMIN: "True"
  ports:
    - containerPort: 7021
      targetPort: 9000
  volumes:
    - name: koku-code
      mountPath: /koku/koku
    - name: unleash-config
      mountPath: /koku/.unleash
    - name: db-functions
      mountPath: /koku/db_functions
    - name: scripts
      mountPath: /koku/scripts
    - name: credentials
      mountPath: /etc/credentials

sourcesClient:
  image: "ghcr.io/ennva/koku/koku-base:0.0.2"
  containerName: sources_client
  workingDir: /koku/
  entrypoint:
    - watchmedo
    - auto-restart
    - "--directory=./koku"
    - "--pattern=*.py"
    - "--ignore-patterns=*test*"
    - "--recursive"
    - "--"
    - python
    - koku/manage.py
    - sources
  environment:
    DJANGO_READ_DOT_ENV_FILE: "True"
    SOURCES: "True"
    DATABASE_SERVICE_NAME: POSTGRES_SQL
    DATABASE_ENGINE: postgresql
    DATABASE_NAME: postgres
    POSTGRES_SQL_SERVICE_HOST: db
    POSTGRES_SQL_SERVICE_PORT: 5432
    DATABASE_USER: postgres
    DATABASE_PASSWORD: postgres
    KOKU_API_HOST: koku-server
    KOKU_API_PORT: "8000"
    KOKU_API_PATH_PREFIX: /api/cost-management/v1
    SOURCES_API_SVC_HOST: sources-server
    SOURCES_API_SVC_PORT: "3000"
    REDIS_HOST: redis
    REDIS_PORT: "6379"
    INSIGHTS_KAFKA_HOST: kafka
    INSIGHTS_KAFKA_PORT: "29092"
    KOKU_SOURCES_CLIENT_PORT: "9000"
    AWS_SHARED_CREDENTIALS_FILE: ""
    GOOGLE_APPLICATION_CREDENTIALS: ""
    OCI_SHARED_CREDENTIALS_FILE: ""
    OCI_CLI_KEY_FILE: ""
    OCI_PYTHON_SDK_NO_SERVICE_IMPORTS: "True"
    DEMO_ACCOUNTS: ""
    PROMETHEUS_MULTIPROC_DIR: /tmp
    KOKU_LOG_LEVEL: DEBUG
    DJANGO_LOG_LEVEL: INFO
    UNLEASH_LOG_LEVEL: WARNING
    SOURCES_API_PREFIX: /api/sources/v1.0
    SOURCES_PSK: thisMustBeEphemeralOrMinikube
    AUTO_DATA_INGEST: "True"
    RUN_GUNICORN: ""
    POD_CPU_LIMIT: "1"
    GUNICORN_WORKERS: "3"
    GUNICORN_THREADS: "False"
    UNLEASH_HOST: unleash
    UNLEASH_PREFIX: http
    UNLEASH_PORT: "4242"
    UNLEASH_TOKEN: "" # Required
    ENHANCED_ORG_ADMIN: "True"
  ports:
    - containerPort: 4000
      targetPort: 8000
    - containerPort: 4001
      targetPort: 9000
  volumes:
    - name: koku-code
      mountPath: /koku/koku
    - name: unleash-config
      mountPath: /koku/.unleash
    - name: db-functions
      mountPath: /koku/db_functions
    - name: scripts
      mountPath: /koku/scripts
    - name: credentials
      mountPath: /etc/credentials

kokuBeat:
  enabled: true
  image: "ghcr.io/ennva/koku/koku-base:0.0.2" # Replace with your actual base image
  containerName: koku_beat
  hostname: koku-beat
  workingDir: /koku/koku
  entrypoint:
    - celery
    - "-A"
    - "koku"
    - "beat"
    - "-l"
    - "info"
  environment:
    DATABASE_SERVICE_NAME: POSTGRES_SQL
    DATABASE_ENGINE: postgresql
    DATABASE_NAME: postgres
    POSTGRES_SQL_SERVICE_HOST: db
    POSTGRES_SQL_SERVICE_PORT: 5432
    DATABASE_USER: postgres
    DATABASE_PASSWORD: postgres
    REDIS_HOST: redis
    REDIS_PORT: "6379"
    LOG_LEVEL: INFO
    DJANGO_SETTINGS_MODULE: koku.settings
    PROMETHEUS_MULTIPROC_DIR: /tmp
    SCHEDULE_REPORT_CHECKS: "True"
    SOURCE_STATUS_SCHEDULE: ""
    UPLOAD_NORMALIZED_DATA_INTERVAL: "10000000"
    UNLEASH_HOST: unleash
    UNLEASH_PREFIX: http
    UNLEASH_PORT: "4242"
    UNLEASH_TOKEN: "" # Required
    ENHANCED_ORG_ADMIN: "True"
  volumes:
    - name: koku-code
      mountPath: /koku/koku
    - name: unleash-config
      mountPath: /koku/.unleash
    - name: db-functions
      mountPath: /koku/db_functions
    - name: scripts
      mountPath: /koku/scripts

postgres:
  enabled: true
  image: ghcr.io/ennva/koku/koku-db:0.0.1
  replicas: 1
  servicePort: 5432
  database: koku
  user: koku
  existingSecret: "koku-postgres-secret"  # The secret name you created with "kubectl create secret generic postgres-secret --from-literal=password=<your_password>"
  passwordKey: "password" # The key within the secret that contains the password
  storage: 10Gi

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80

pgadmin:
  enabled: true
  image: dpage/pgadmin4
  tag: latest
  email: postgres@local.dev
  password: postgres
  port: 8432
  containerPort: 80

  volumeMounts:
    serversFile:
      enabled: true
      path: ./files/pgadmin_servers.json

redis:
  enabled: true
  image: redis:5.0.4
  replicas: 1
  servicePort: 6379
  ingress:
    enabled: false

pushgateway:
  enabled: true
  image: prom/pushgateway
  replicas: 1
  servicePort: 9091
  ingress:
    enabled: false

unleash:
  enabled: true
  image: unleashorg/unleash-server:5.8.2
  replicas: 1
  servicePort: 4242
  adminToken: "*:*.dbffffc83b1f92eeaf133a7eb878d4c58231acc159b5e1478ce53cfc" # Replace with your desired admin token
  clientToken: "*:development.dbffffc83b1f92eeaf133a7eb878d4c58231acc159b5e1478ce53cfc" # Replace with your desired client token
  patToken: "user:6188b62f2f59348f3c195b66983147111682f4bb78a3f7ed9626bd84"
  database: unleash
  logLevel: INFO
  flags:
    features:
      - name: "my-feature"
        enabled: true
        strategies:
          - name: "default"
  # Example flags configuration:
  # flags:
  #   myFeature: true
  #   anotherSetting: "enabled"
  ingress:
    enabled: false

minio:
  enabled: true
  image: minio/minio:RELEASE.2025-01-20T14-49-07Z
  mcImage: minio/mc:latest
  replicas: 1
  servicePort: 9000
  consolePort: 9090
  accessKey: "kokuminioaccess" # In production apply the as postgres
  secretKey: "kokuminiosecret" # In production apply the as postgres
  bucketName: "koku-bucket"
  ingressBucketName: "ocp-ingress"
  metastoreBucketName: "metastore"
  storage: 20Gi
  securityContext: {}
  # Example custom security context:
  # securityContext:
  #   runAsUser: 1001
  #   runAsGroup: 1001
  #   fsGroup: 1001
  ingress:
    enabled: false

parquet_bucket:
  create:
    enabled: true

hiveMetastore:
  image: quay.io/redhat-services-prod/cost-mgmt-dev-tenant/ubi-hive:2f89bfb
  containerName: hive-metastore
  ports:
    - containerPort: 8000
      servicePort: 9083 # The port to expose via the Kubernetes Service
  environment:
    HIVE_LOGLEVEL: INFO
    S3_ENDPOINT: http://koku-minio:9000
    S3_ACCESS_KEY: kokuminioaccess
    S3_SECRET: kokuminiosecret
    S3_BUCKET_NAME: koku-bucket
    S3_BUCKET_PATH: data
    POSTGRES_SQL_SERVICE_HOST: koku-postgres-service
    POSTGRES_SQL_SERVICE_PORT: 5432
    DATABASE_NAME: hive
    DATABASE_USER: hive
    DATABASE_PASSWORD: hive
  volumes:
    - name: metastore-config
      mountPath: /opt/hive-metastore-bin/conf/metastore-site.xml
      subPath: metastore-site.xml
  # dependencies: # Kubernetes doesn't directly handle depends_on like Docker Compose
  #   - db
  #   - minio
  #   - create-parquet-bucket
  # You might need to handle these dependencies using init containers,
  # readiness probes, or application-level logic.

ingress:
  enabled: true
  tls:
    enabled: false
    hosts:
      - koku.example.com
      - masu.example.com
      - sources.example.com
      - minio.example.com
    secretName: koku-tls-secret # Name of the Kubernetes Secret containing TLS certificate and key
  kokuServer:
    hostname: koku.example.com
    path: "/api/cost-management(/.*|$)"
    pathType: ImplementationSpecific
  kokuServerAdmin:
    hostname: koku.example.com
    path: "/admin"
  masuServer:
    hostname: masu.example.com
    path: "/api/cost-management"
  masuServerAdmin:
    hostname: masu.example.com
    path: "/admin"
  sourcesClient:
    hostname: sources.example.com
    path: "/sources"
  sourcesClientAdmin:
    hostname: sources.example.com
    path: "/sources-admin"
  minioConsole:
    hostname: minio.example.com
    path: "/minio"

route:
  enabled: false # Set to true if deploying on OpenShift
  tls:
    enabled: false
    termination: edge # Options: edge, passthrough, reencrypt
    certificate: ""    # Your TLS certificate data
    privateKey: ""     # Your TLS private key data
    caCertificate: ""  # Optional: CA certificate
    destinationCACertificate: "" # Required for reencrypt termination
  kokuServer:
    hostname: koku.apps.example.com # OpenShift route hostname
    path: "/api/cost-management"
  kokuServerAdmin:
    hostname: koku-admin.apps.example.com # OpenShift route hostname
    path: "/admin"
  masuServer:
    hostname: masu.apps.example.com # OpenShift route hostname
    path: "/api/cost-management"
  masuServerAdmin:
    hostname: masu-admin.apps.example.com # OpenShift route hostname
    path: "/admin"
  sourcesClient:
    hostname: sources.apps.example.com # OpenShift route hostname
    path: "/sources"
  sourcesClientAdmin:
    hostname: sources-admin.apps.example.com # OpenShift route hostname
    path: "/sources-admin"